<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java8 parallelStream 基础介绍</title>
    <url>/2020/03/15/java8-de-parallelstream-ji-chu-jie-shao/</url>
    <content><![CDATA[<h2 id="parallelStream-是什么？"><a href="#parallelStream-是什么？" class="headerlink" title="parallelStream 是什么？"></a>parallelStream 是什么？</h2><p>Java8中新增了Lambda语法，方便对数据进行快速迭代的流式运算，有的时候数据处理比较慢，这个时候我们就需要引入多线程来对任务进行分片操作，Stream提供了对应的方法就是parallelStream()，也就是<code>stream().parallel()</code>，这个时候就会将数据从串行流需改为并行流。这时候我们就会好奇，我们也没配置线程池，它默认的线程池大小是多少？有什么需要注意的地方？</p>
<ul>
<li><p>第一个问题它默认连接池是什么，大小是多大？</p>
<p>先说结论，默认使用的连接池是 <strong><em>ForkJoinPool.commonPool</em></strong><br>连接池默认大小 <strong><em>Runtime.getRuntime().availableProcessors()</em></strong>(也就是你系统的处理器数量)<br>  我们做一个简单的测试，看看结论是否正确</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Set<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
          Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">//输出当前线程的类型和名字，并打印正在处理的值</span>
           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ThreadType:{},currentThread:{},Integer:{}"</span><span class="token punctuation">,</span>thread<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
           threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//打印我们总共所使用到的线程集合</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"all threads:\n{}"</span><span class="token punctuation">,</span> threads<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Thread<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<pre class=" language-verilog"><code class="language-verilog">  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">5</span>
  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">3</span>
  java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>main<span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">7</span>
  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">4</span>
  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">2</span>
  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">8</span>
  java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>main<span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">10</span>
  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">6</span>
  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">1</span>
  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinWorkerThread<span class="token punctuation">,</span>currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">9</span>
  all threads<span class="token punctuation">:</span>
  main
  ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">7</span>
  ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">4</span>
  ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>
  ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">5</span>
  ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span>
  ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">6</span>
  ForkJoinPool<span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span>
</code></pre>
<p>  从日志中我们可以看到，parallelStream使用了主线程和ForkJoinPool所创建的ForkJoinWorkerThread线程，并且总的线程数也等于我当前电脑的线程数8个<br>  《java8实战》这么描述的：</p>
</li>
</ul>
<blockquote>
<p>并行流内部使用了默认的ForkJoinPool（7.2节会进一步讲到分支/合并框架），它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().available- Processors()得到的。 但是你可以通过系统属性java.util.concurrent.ForkJoinPool.common. parallelism来改变线程池大小，如下所示： System.setProperty(“java.util.concurrent.ForkJoinPool.common.parallelism”,”12”); 这是一个全局设置，因此它将影响代码中所有的并行流。反过来说，目前还无法专为某个 并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值， 除非你有很好的理由，否则我们强烈建议你不要修改它。</p>
</blockquote>
<p>  如果我们要修改默认情况的并发数大小，就需要修改<code>java.util.concurrent.ForkJoinPool.common.parallelism</code> ,这个值是final类型的，也就是整个JVM中只允许修改一次，特别需要注意的是，多个parallelStream之间使用的是同一个默认的ForkJoinPool，所以最好不要把会阻塞线程的操作放在默认的池子中，否则会影响到其他默认的parallelStream。如果需要为单独的<em>parallelStream</em>指定并发数大小，就需要引入ForkJoinPool。</p>
<pre class=" language-java"><code class="language-java">     Set<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        IntStream intStream <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> intStream<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//输出当前线程的类型和名字，并打印正在处理的值</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"currentThread:{},Integer:{}"</span><span class="token punctuation">,</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//打印我们总共所使用到的线程集合</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"all threads:\n{}"</span><span class="token punctuation">,</span> threads<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Thread<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-verilog"><code class="language-verilog">  currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">9</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">3</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">10</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">8</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">2</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">7</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">4</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">1</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">6</span>
    currentThread<span class="token punctuation">:</span>ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>Integer<span class="token punctuation">:</span><span class="token number">5</span>
    all threads<span class="token punctuation">:</span>
    ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">5</span>
    ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span>
    ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span>
    ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>
    ForkJoinPool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">4</span>
</code></pre>
<p>  从日志中我们可以看到，这个时候并发线程的数量已经被控制到5个了，并且是没有使用主线程来进行运算的</p>
<h2 id="parallelStream的利弊"><a href="#parallelStream的利弊" class="headerlink" title="parallelStream的利弊"></a>parallelStream的利弊</h2><ul>
<li>利：<ul>
<li>直接使用lambda表达式，代码清晰整洁。</li>
<li>能够直接使用forkAndJoin特性进行并行处理</li>
</ul>
</li>
<li>弊：<ul>
<li>在多线程场景中使用parallelStream是没有效果的，因为本来就是在争抢cpu的状态中，即使用上了它并不会有太大的提升，反而增加了线程切换带来的开销</li>
<li>parallelStream不保证执行顺序，即使是使用了同步集合</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>一.使用了并发工具类库，线程安全就高枕无忧了吗？</title>
    <url>/2020/03/14/yi.shi-yong-liao-bing-fa-gong-ju-lei-ku-xian-cheng-an-quan-jiu-gao-zhen-wu-you-liao-ma/</url>
    <content><![CDATA[<h3 id="没有意识到线程重用导致用户信息错乱的Bug"><a href="#没有意识到线程重用导致用户信息错乱的Bug" class="headerlink" title="没有意识到线程重用导致用户信息错乱的Bug"></a>没有意识到线程重用导致用户信息错乱的Bug</h3><ul>
<li><p>ThrealLocal 会重复利用线程池的线程，将springBoot中的配置文件添加<code>server.tomcat.max-threads=1</code> 此时Tomcat只有一个线程在运行，这时候这段代码就会出现问题</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> Integer userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    String before <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String after <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">,</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">,</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在第二个请求的时候 会获取到第一次的<strong>UserID</strong> </p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"before"</span><span class="token operator">:</span> <span class="token string">"http-nio-8080-exec-1:1"</span><span class="token punctuation">,</span>
  <span class="token property">"after"</span><span class="token operator">:</span> <span class="token string">"http-nio-8080-exec-1:2"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>按理说，在设置用户信息之前第一次获取的值始终应该是 null，但我们要意识到，程序运行在 Tomcat 中，执行程序的线程是 Tomcat 的工作线程，而 Tomcat 的工作线程是基于线程池的。顾名思义，线程池会重用固定的几个线程，一旦<strong>线程重用</strong>，那么很可能首次从 ThreadLocal 获取的值是之前其他用户的请求遗留的值。这时，ThreadLocal 中的用户信息就是其他用户的信息。</p>
</li>
<li><p>不能认为没有<strong>显示</strong>的开启多线程或者使用线程池 就没有线程安全的风险。</p>
</li>
<li><p>线程创建的代价比较贵，所以服务器会节省这部分的开销，使用线程池进行处理请求，Tomcat默认的线程池大小是<em>200</em> 代码中如果只是临时使用ThreadLocal变量，需要在使用结束后手动置空，防止被后续的请求给复用。</p>
<pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> Integer userId<span class="token punctuation">)</span><span class="token punctuation">{</span>

        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            String before <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String after <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">,</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">,</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> map<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            currentUser<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
<h3 id="使用了线程安全的并发工具，并不代表解决了所有线程安全问题"><a href="#使用了线程安全的并发工具，并不代表解决了所有线程安全问题" class="headerlink" title="使用了线程安全的并发工具，并不代表解决了所有线程安全问题"></a>使用了线程安全的并发工具，并不代表解决了所有线程安全问题</h3><ul>
<li><p><strong>ConcurrentHashMap</strong> 只保证原子性的读写是线程安全的， 不代表对多个操作之间的状态是一致的，如果有其他线程在同时操作它，此时仍需要手动进行加锁</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//线程个数</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> THREAD_COUNT <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 总元素数量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ITEM_COUNT <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//帮助方法，用来获得一个指定元素数量模拟数据的</span>
    <span class="token keyword">private</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Long<span class="token operator">></span> <span class="token function">getData</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> LongStream
                <span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors
                        <span class="token punctuation">.</span><span class="token function">toConcurrentMap</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">,</span> ConcurrentHashMap<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Long<span class="token operator">></span> concurrentHashMap <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span>ITEM_COUNT<span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"init Size{}"</span><span class="token punctuation">,</span>concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>THREAD_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ITEM_COUNT <span class="token operator">-</span> concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> a <span class="token operator">=</span> ITEM_COUNT <span class="token operator">-</span> concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"a size {}"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
                concurrentHashMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">awaitQuiescence</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish Size {}"</span><span class="token punctuation">,</span>concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
</code></pre>
<pre class=" language-verilog"><code class="language-verilog">INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> init Size900
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>onPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>onPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>onPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>onPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>onPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>onPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>onPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> a size <span class="token number">100</span>
INFO <span class="token number">33005</span> <span class="token operator">---</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>MapError<span class="token punctuation">:</span> finish Size <span class="token number">1700</span>
</code></pre>
<p>此时得到的1700 并不符合我们所需要的1000的目标值，说明这段代码存在线程不安全的问题。</p>
<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Long<span class="token operator">></span> concurrentHashMap <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span>ITEM_COUNT<span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"init Size{}"</span><span class="token punctuation">,</span>concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>THREAD_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//此处进行加锁，但是也丢失了并发的作用</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>concurrentHashMap<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ITEM_COUNT <span class="token operator">-</span> concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> a <span class="token operator">=</span> ITEM_COUNT <span class="token operator">-</span> concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"a size {}"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    concurrentHashMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">awaitQuiescence</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finish Size {}"</span><span class="token punctuation">,</span>concurrentHashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>对<em>concurrentHashMap</em>进行加锁肯定是能够解决问题的，但是这么一来还有必要选择使用<strong>ConcurrentHashMap</strong>？</p>
<p>直接使用<strong>HashMap</strong>加锁也有同样的效果,说明在此处的<strong>ConcurrentHashMap</strong>是没必要的,是错误理解了它的作用而得到的错误用法。</p>
</li>
</ul>
<h3 id="没有充分了解并发工具的特性，从而无法发挥其威力"><a href="#没有充分了解并发工具的特性，从而无法发挥其威力" class="headerlink" title="没有充分了解并发工具的特性，从而无法发挥其威力"></a>没有充分了解并发工具的特性，从而无法发挥其威力</h3><ul>
<li><p><strong>ConCurrentHashMap</strong> 的一个常用的场景是用于统计 Map中key出现的次数</p>
</li>
<li><p>假设使用10个并发线程往 Map中写入值，Key的范围是0-9，循环写入1000W次，Value为Key出现的次数</p>
</li>
<li><p>一般做法就是直接map进行循环，为了保证不重复初始化Key，这时候为Key的累加加上锁</p>
<pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token function">normaluse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> freqs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>ITEM_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>THREAD_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> LOOP_COUNT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">//获得一个随机的Key</span>
                    String key <span class="token operator">=</span> <span class="token string">"item"</span> <span class="token operator">+</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>ITEM_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>freqs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>freqs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment" spellcheck="true">//Key存在则+1</span>
                            freqs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> freqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token comment" spellcheck="true">//Key不存在则初始化为1</span>
                            freqs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> 1L<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> freqs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
</li>
<li><p>第二种做法就是使用ConcurrentHashMap 内置的 conputeIfAbsent 方法进行增加</p>
<pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token function">gooduse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> LongAdder<span class="token operator">></span> freqs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>ITEM_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>THREAD_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> LOOP_COUNT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                    String key <span class="token operator">=</span> <span class="token string">"item"</span> <span class="token operator">+</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>ITEM_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//利用computeIfAbsent()方法来实例化LongAdder，然后利用LongAdder来进行线程安全计数</span>
                    freqs<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinPool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//因为我们的Value是LongAdder而不是Long，所以需要做一次转换才能返回</span>
        <span class="token keyword">return</span> freqs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>
                        Map<span class="token punctuation">.</span>Entry<span class="token operator">:</span><span class="token operator">:</span>getKey<span class="token punctuation">,</span>
                        e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
</li>
<li><p>这两种做法都能满足我们统计的需求，我们通过<em>StopWatch</em> 来对两个方式的速度进行统计</p>
<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/compare"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compareTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>

        StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"goodUse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> goodUse <span class="token operator">=</span> <span class="token function">goodUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>goodUse<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ITEM_COUNT<span class="token punctuation">,</span><span class="token string">"goodUse count Err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>goodUse<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mapToLong</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token operator">==</span>LOOP_COUNT<span class="token punctuation">,</span><span class="token string">"goodUse count Err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"normalUse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> normalUse <span class="token operator">=</span> <span class="token function">normalUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>normalUse<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ITEM_COUNT<span class="token punctuation">,</span><span class="token string">"normalUse count Err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>normalUse<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mapToLong</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token operator">==</span>LOOP_COUNT<span class="token punctuation">,</span><span class="token string">"normalUse count Err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>    
</code></pre>
<pre class=" language-verilog"><code class="language-verilog">StopWatch ''<span class="token punctuation">:</span> running <span class="token keyword">time</span> <span class="token operator">=</span> <span class="token number">17247637770</span> ns
<span class="token operator">---------------------------------------------</span>
ns         <span class="token operator">%</span>     Task name
<span class="token operator">---------------------------------------------</span>
<span class="token number">1860003595</span>  <span class="token number">011</span><span class="token operator">%</span>  goodUse
<span class="token number">15387634175</span>  <span class="token number">089</span><span class="token operator">%</span>  normalUse
</code></pre>
<p>由日志可知，两者时间上的差距将近9倍。</p>
</li>
</ul>
<h3 id="没有认清并发工具的使用场景，因而导致性能问题"><a href="#没有认清并发工具的使用场景，因而导致性能问题" class="headerlink" title="没有认清并发工具的使用场景，因而导致性能问题"></a>没有认清并发工具的使用场景，因而导致性能问题</h3><ul>
<li><p><strong>CopyOnWrite</strong> （目前我暂时没使用过，这儿就直接引用专栏老师的例子）</p>
<ul>
<li>这个是在写入的时候直接复制一份数据进行写入，然后将旧的引用指向新的队列，这样可以不用加锁，在写的同时，读操作依然可以读取旧的数据，Concurrent容器则不能做到这一点。</li>
<li>但是也有两个缺点：<ul>
<li>1.因为对旧的数据进行了一份拷贝，所以占用的内存比较大，等于是空间换时间。</li>
<li>2.不适用于对数据一致性时效要求比较高的场景，因为他只保证了数据的最终一致性，Concurrent则是保证了数据的随时一致性，<em>适用于黑名单缓存等对时效性要求没有那么高的场景</em>。</li>
</ul>
</li>
</ul>
</li>
<li><p>我们发现一段简单的非数据库操作的业务逻辑，消耗了超出预期的时间，在修改数据时操作本地缓存比回写数据库慢许多。查看代码发现，开发同学使用了 CopyOnWriteArrayList 来缓存大量的数据，而数据变化又比较频繁</p>
</li>
<li><p>在 Java 中，<strong>CopyOnWriteArrayList 虽然是一个线程安全的 ArrayList，但因为其实现方式是，每次修改数据时都会复制一份数据出来，所以有明显的适用场景，即读多写少或者说希望无锁读的场景</strong>。</p>
</li>
<li><p>如果我们要使用 CopyOnWriteArrayList，那一定是因为场景需要而不是因为足够酷炫。如果读写比例均衡或者有大量写操作的话，使用 CopyOnWriteArrayList 的性能会非常糟糕。</p>
</li>
<li><p>我们写一段测试代码，来比较下使用 CopyOnWriteArrayList 和普通加锁方式 ArrayList 的读写性能吧。在这段代码中我们针对并发读和并发写分别写了一个测试方法，测试两者一定次数的写或读操作的耗时。</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//测试并发写的性能</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Map <span class="token function">testWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> copyOnWriteArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> synchronizedList <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> loopCount <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"Write:copyOnWriteArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//循环100000次并发往CopyOnWriteArrayList写入随机元素</span>
        IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> loopCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> copyOnWriteArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>loopCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"Write:synchronizedList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//循环100000次并发往加锁的ArrayList写入随机元素</span>
        IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> loopCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> synchronizedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>loopCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"copyOnWriteArrayList"</span><span class="token punctuation">,</span> copyOnWriteArrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"synchronizedList"</span><span class="token punctuation">,</span> synchronizedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//帮助方法用来填充List</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//测试并发读的性能</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Map <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//创建两个测试对象</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> copyOnWriteArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> synchronizedList <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//填充数据</span>
        <span class="token function">addAll</span><span class="token punctuation">(</span>copyOnWriteArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addAll</span><span class="token punctuation">(</span>synchronizedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> loopCount <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> copyOnWriteArrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"Read:copyOnWriteArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//循环1000000次并发从CopyOnWriteArrayList随机查询元素</span>
        IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> loopCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> copyOnWriteArrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"Read:synchronizedList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//循环1000000次并发从加锁的ArrayList随机查询元素</span>
        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> loopCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> synchronizedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"copyOnWriteArrayList"</span><span class="token punctuation">,</span> copyOnWriteArrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"synchronizedList"</span><span class="token punctuation">,</span> synchronizedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
<ul>
<li><p>运行程序可以看到，大量写的场景（10 万次 add 操作），CopyOnWriteArray 几乎比同步的 ArrayList 慢一百倍：</p>
<pre class=" language-verilog"><code class="language-verilog">StopWatch ''<span class="token punctuation">:</span> running <span class="token keyword">time</span> <span class="token operator">=</span> <span class="token number">4207613566</span> ns
<span class="token operator">---------------------------------------------</span>
ns         <span class="token operator">%</span>     Task name
<span class="token operator">---------------------------------------------</span>
<span class="token number">4117309161</span>  <span class="token number">098</span><span class="token operator">%</span>  Write<span class="token punctuation">:</span>copyOnWriteArrayList
<span class="token number">090304405</span>  <span class="token number">002</span><span class="token operator">%</span>  Write<span class="token punctuation">:</span>synchronizedList
</code></pre>
</li>
<li><p>而在大量读的场景下（100 万次 get 操作），CopyOnWriteArray 又比同步的 ArrayList 快十倍以上</p>
<pre class=" language-verilog"><code class="language-verilog">StopWatch ''<span class="token punctuation">:</span> running <span class="token keyword">time</span> <span class="token operator">=</span> <span class="token number">416496271</span> ns
<span class="token operator">---------------------------------------------</span>
ns         <span class="token operator">%</span>     Task name
<span class="token operator">---------------------------------------------</span>
<span class="token number">028776967</span>  <span class="token number">007</span><span class="token operator">%</span>  Read<span class="token punctuation">:</span>copyOnWriteArrayList
<span class="token number">387719304</span>  <span class="token number">093</span><span class="token operator">%</span>  Read<span class="token punctuation">:</span>synchronizedList
</code></pre>
<p>以 add 方法为例，每次 add 时，都会用 Arrays.copyOf 创建一个新数组，频繁 add 时内存的申请释放消耗会很大：</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * Appends the specified element to the end of this list.
     *
     * @param e element to be appended to this list
     * @return {@code true} (as specified by {@link Collection#add})
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>    
</code></pre>
<p>get方法则相反，因为在读取的时候CopyOnWriteArray不需要加锁，所以总体开销是比加锁的ArrayList低的。</p>
</li>
</ul>
<h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ul>
<li><p>我们多次用到了 ThreadLocalRandom，你觉得是否可以把它的实例设置到静态变量中，在多线程情况下重用呢？</p>
<p>不可以，结果是除了初始化 ThreadLocalRandom 的主线程获取的随机值是无模式的（调用者不可预测下个返回值，满足我们对伪随机的要求）之外，其他线程获得随机值都不是相互独立的（本质上来说，是因为他们用于生成随机数的种子 seed 的值可预测的，为 i <em> gamma，其中 i 是当前线程调用随机数生成方法次数，而 gamma 是 ThreadLocalRandom 类的一个 long 静态字段值）。例如，一个有趣的现象是，所有非初始化 ThreadLocalRandom 实例的线程如果调用相同次数的 nextInt() 方法，他们得到的随机数串是完全相同的。<br>造成这样现象的原因在于，ThreadLocalRandom 类维护了一个类单例字段，线程通过调用 ThreadLocalRandom#current() 方法来获取 ThreadLocalRandom 单例，然后以线程维护的实例字段 threadLocalRandomSeed 为种子生成下一个随机数和下一个种子值。<br>那么既然是单例模式，为什么多线程共用主线程初始化的实例就会出问题呢。问题就在于 current 方法，线程在调用 current() 方法的时候，会根据用每个线程的 thread 的一个实例字段 threadLocalRandomProbe 是否为 0 来判断是否当前线程实例是否为第一次调用随机数生成方法，从而决定是否要给当前线程初始化一个随机的 threadLocalRandomSeed 种子值。因此，如果其他线程绕过 current 方法直接调用随机数方法，那么它的种子值就是 0, 1 </em> gamma, 2 * gamma… 因此也就是可预测的了。</p>
</li>
<li><p>ConcurrentHashMap 还提供了 putIfAbsent 方法，你能否通过查阅JDK 文档，说说 computeIfAbsent 和 putIfAbsent 方法的区别？</p>
<p>computeIfAbsent和putIfAbsent区别是三点：</p>
<ol>
<li>当Key存在的时候，如果Value获取比较昂贵的话，putIfAbsent就白白浪费时间在获取这个昂贵的Value上（这个点特别注意）</li>
<li>Key不存在的时候，putIfAbsent返回null，小心空指针，而computeIfAbsent返回计算后的值</li>
<li>当Key不存在的时候，putIfAbsent允许put null进去，而computeIfAbsent不能，之后进行containsKey查询是有区别的（当然了，此条针对HashMap，ConcurrentHashMap不允许put null value进去）</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>common—error</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka安装手册</title>
    <url>/2020/03/12/kafka-an-zhuang-shou-ce/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>kafka 2.11-0.9.0.1</li>
<li>zookeeper 3.4.14</li>
<li>jdk openjdk version “1.8.0_242”</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>一. Zookeeper</p>
<pre class=" language-sh"><code class="language-sh">tar -xvzf zookeeper-3.4.14.tar.gz
mv zookeeper-3.4.14 /opt/
cd /opt/zookeeper-3.4.14/conf/
## 复制模板配置文件
cp zoo_sample.cfg zoo.cfg
##### 可选，修改zoo.cfg 中的data地址
dataDir=/opt/zookeeper-3.4.14/data
######

##启动
cd ../bin/
./zkServer.sh  start
## 修改环境变量，把zookeeper 地址添加进去
sudo vim /etc/profile
######
ZOOKEEPER_HOME=/opt/zookeeper-3.4.14
PATH=$PATH:$ZOOKEEPER_HOME/bin
######
source /etc/profile
</code></pre>
<p>二. Kafka</p>
<pre class=" language-sh"><code class="language-sh">tar xvzf kafka_2.11-0.9.0.1.tgz
mv kafka_2.11-0.9.0.1 /opt/
cd /opt/kafka_2.11-0.9.0.1/
## 运行前需要确认Zookeeper是否启动 并且修改config/server.properties 中的Zookeeper地址
cd bin/
nohup kafka-server-start.sh ../config/server.properties &
### 没报错为正常启动 ，否则查看 nohup文件查看错误，一般情况为内存太大
vim  kafka-server-start.sh
if [ "x$KAFKA_HEAP_OPTS" = "x" ]; then
    export KAFKA_HEAP_OPTS="-Xmx256m -Xms128m"
fi
######

## 修改环境变量，把zookeeper 地址添加进去
sudo vim /etc/profile
######
KAFKA_HOME=/opt/kafka_2.11-0.9.0.1
PATH=$PATH:$KAFKA_HOME/bin
######
source /etc/profile
</code></pre>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>打开两个窗口</li>
<li>窗口一为producer </li>
<li>执行<code>opt/kafka_2.11-0.9.0.1$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</code></li>
<li>窗口二为consumer </li>
<li>执行<code>opt/kafka_2.11-0.9.0.1$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</code></li>
<li>在producer任意输入内容，查看consumer是否能正常接收，如果可以则安装完成</li>
</ul>
]]></content>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的前序，中序，后续遍历</title>
    <url>/2019/05/31/er-cha-shu-de-qian-xu-zhong-xu-hou-xu-bian-li/</url>
    <content><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul>
<li>递归的做法比较简单，直接递归调用方法就行，三种方式仅仅是入队列的位置不同而已，这儿就直接贴代码了</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">return</span> list<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token comment" spellcheck="true">//前序遍历</span>
         <span class="token comment" spellcheck="true">//list.add(root.val);</span>

         <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
             list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token comment" spellcheck="true">//中序遍历</span>
         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
             list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token comment" spellcheck="true">//后序遍历</span>
         <span class="token comment" spellcheck="true">//list.add(root.val);</span>

         <span class="token keyword">return</span> list<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre>
<h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><ul>
<li>非递归的做法通常使用栈的方式处理，后续会比较麻烦一点，我们一个个来。<ol>
<li>前序遍历</li>
</ol>
</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">preorderTraversal_2</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         <span class="token comment" spellcheck="true">//前序遍历的顺序是《根左右》</span>
         List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
         Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment" spellcheck="true">//节点非空就入栈</span>
             <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token comment" spellcheck="true">//根节点先直接输出</span>
                 list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment" spellcheck="true">//一路往左子树深入</span>
                 temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             <span class="token comment" spellcheck="true">//开始弹出堆栈，处理右子树</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>

         <span class="token keyword">return</span> list<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre>
<ol start="2">
<li>中序遍历</li>
</ol>
<pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal_2</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//前序遍历的顺序是《左根右》</span>
         List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
         Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token comment" spellcheck="true">//一路往左子树深入</span>
                 stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token comment" spellcheck="true">//弹出最后一个左子树的节点</span>
                 temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment" spellcheck="true">//输出当前值</span>
                 list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment" spellcheck="true">//往当前节点的右子树深入</span>
                 temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>

         <span class="token keyword">return</span> list<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre>
<ol start="3">
<li><p>后序遍历</p>
<ul>
<li>堆栈做法，因为是《左右根》的顺序，所以堆栈出栈的时候会调用两次，第一次完成左子树的遍历，到节点，此时该节点临时保存下，不输出，重新入栈，然后继续往该节点的右子树进行遍历，直到下一次临时节点等于栈顶，代表该节点的右子树也遍历完毕，此时再将节点的值进行输出</li>
</ul>
</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
      * 描述 后序遍历 非递归
      * 左边到最底层-》第一次出栈-》右边到最底层-》第二次出栈-》记录
      * @param root
      * @return java.util.List&lt;java.lang.Integer>
      * @author Ted Wang
      * @created 2019/5/27 15:02
      **/</span>
     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
         TreeNode last <span class="token operator">=</span> null<span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//走到左子树最底层</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
             temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                 <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token comment" spellcheck="true">//走到右子树的最左边</span>
                     stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                 <span class="token comment" spellcheck="true">//没有右子树或者右子树已经遍历完成，输出该节点</span>
                 list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 last <span class="token operator">=</span> temp<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">return</span> list<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre>
<ul>
<li>逆序做法，因为<strong>前序遍历</strong> 是 《根 左 右》，而 <strong>后序遍历</strong>是 《左 右 根》，所以只需要把<strong>前序遍历</strong>的遍历顺序改为《根 右 左》此时就正好是<strong>后续遍历</strong>的逆序遍历，把输出结果逆序输出就行</li>
</ul>
<pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">/**
      * 描述 后序遍历 非递归
      * 前序 :根左右 改成 根右左 =》逆序 左右根（后序遍历）
      * @param root
      * @return java.util.List&lt;java.lang.Integer>
      * @author Ted Wang
      * @created 2019/5/27 15:02
      **/</span>
     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal2</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
         Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
         Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token keyword">return</span> list<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
      * 描述 后序遍历 非递归 
      * 前序 :根左右 改成 根右左 =》逆序 左右根（后序遍历）
      * 思路和上面的方法一致，只是list在保存的时候直接逆序保存
      * @param root
      * @return java.util.List&lt;java.lang.Integer>
      * @author Ted Wang
      * @created 2019/5/27 15:02
   **/</span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal3</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
         Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
             list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>


         <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>​    </p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/05/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
