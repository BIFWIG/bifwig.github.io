<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一.使用了并发工具类库，线程安全就高枕无忧了吗？</title>
    <url>/2020/03/14/%E4%B8%80.%E4%BD%BF%E7%94%A8%E4%BA%86%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%B0%B1%E9%AB%98%E6%9E%95%E6%97%A0%E5%BF%A7%E4%BA%86%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="没有意识到线程重用导致用户信息错乱的Bug"><a href="#没有意识到线程重用导致用户信息错乱的Bug" class="headerlink" title="没有意识到线程重用导致用户信息错乱的Bug"></a>没有意识到线程重用导致用户信息错乱的Bug</h3><ul>
<li><p>ThrealLocal 会重复利用线程池的线程，将springBoot中的配置文件添加<code>server.tomcat.max-threads=1</code> 此时Tomcat只有一个线程在运行，这时候这段代码就会出现问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"wrong"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">wrong</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> Integer userId)</span>&#123;</span><br><span class="line">	String before = Thread.currentThread().getName()+<span class="string">":"</span>+currentUser.get();</span><br><span class="line">	currentUser.set(userId);</span><br><span class="line">	String after = Thread.currentThread().getName()+<span class="string">":"</span>+currentUser.get();</span><br><span class="line">	Map&lt;String, Object&gt; map  = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	map.put(<span class="string">"before"</span>,before);</span><br><span class="line">	map.put(<span class="string">"after"</span>,after);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第二个请求的时候 会获取到第一次的<strong>UserID</strong> </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"before"</span>: <span class="string">"http-nio-8080-exec-1:1"</span>,</span><br><span class="line">  <span class="attr">"after"</span>: <span class="string">"http-nio-8080-exec-1:2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按理说，在设置用户信息之前第一次获取的值始终应该是 null，但我们要意识到，程序运行在 Tomcat 中，执行程序的线程是 Tomcat 的工作线程，而 Tomcat 的工作线程是基于线程池的。顾名思义，线程池会重用固定的几个线程，一旦<strong>线程重用</strong>，那么很可能首次从 ThreadLocal 获取的值是之前其他用户的请求遗留的值。这时，ThreadLocal 中的用户信息就是其他用户的信息。</p>
</li>
<li><p>不能认为没有<strong>显示</strong>的开启多线程或者使用线程池 就没有线程安全的风险。</p>
</li>
<li><p>线程创建的代价比较贵，所以服务器会节省这部分的开销，使用线程池进行处理请求，Tomcat默认的线程池大小是<em>200</em> 代码中如果只是临时使用ThreadLocal变量，需要在使用结束后手动置空，防止被后续的请求给复用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"right"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">right</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> Integer userId)</span>&#123;</span><br><span class="line">     </span><br><span class="line">      Map&lt;String, Object&gt; map;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          String before = Thread.currentThread().getName()+<span class="string">":"</span>+currentUser.get();</span><br><span class="line">          currentUser.set(userId);</span><br><span class="line">          String after = Thread.currentThread().getName()+<span class="string">":"</span>+currentUser.get();</span><br><span class="line">          map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">          map.put(<span class="string">"before"</span>,before);</span><br><span class="line">          map.put(<span class="string">"after"</span>,after);</span><br><span class="line">          <span class="keyword">return</span> map;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          currentUser.remove();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用了线程安全的并发工具，并不代表解决了所有线程安全问题"><a href="#使用了线程安全的并发工具，并不代表解决了所有线程安全问题" class="headerlink" title="使用了线程安全的并发工具，并不代表解决了所有线程安全问题"></a>使用了线程安全的并发工具，并不代表解决了所有线程安全问题</h3><ul>
<li><p><strong>ConcurrentHashMap</strong> 只保证原子性的读写是线程安全的， 不代表对多个操作之间的状态是一致的，如果有其他线程在同时操作它，此时仍需要手动进行加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//线程个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> THREAD_COUNT = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 总元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ITEM_COUNT = <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">//帮助方法，用来获得一个指定元素数量模拟数据的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ConcurrentHashMap&lt;String,Long&gt; <span class="title">getData</span> <span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LongStream</span><br><span class="line">                .rangeClosed(<span class="number">1</span>, count)</span><br><span class="line">                .boxed()</span><br><span class="line">                .collect(Collectors</span><br><span class="line">                        .toConcurrentMap(i -&gt; UUID.randomUUID()</span><br><span class="line">                                .toString(),</span><br><span class="line">                                Function.identity(),</span><br><span class="line">                                (o1, o2) -&gt; o1, ConcurrentHashMap::<span class="keyword">new</span>));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"wrong"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wrong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConcurrentHashMap&lt;String,Long&gt; concurrentHashMap = getData(ITEM_COUNT-<span class="number">100</span>);</span><br><span class="line">        log.info(<span class="string">"init Size&#123;&#125;"</span>,concurrentHashMap.size());</span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">        forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>,<span class="number">10</span>).parallel().forEach(value -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (ITEM_COUNT - concurrentHashMap.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = ITEM_COUNT - concurrentHashMap.size() ;</span><br><span class="line">                log.info(<span class="string">"a size &#123;&#125;"</span>,a);</span><br><span class="line">                concurrentHashMap.putAll(getData(a));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        forkJoinPool.shutdown();</span><br><span class="line">        forkJoinPool.awaitQuiescence(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">        log.info(<span class="string">"finish Size &#123;&#125;"</span>,concurrentHashMap.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">INFO <span class="number">33005</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: init Size900</span><br><span class="line">INFO <span class="number">33005</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [onPool-worker-<span class="number">2</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [onPool-worker-<span class="number">4</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [onPool-worker-<span class="number">1</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [onPool-worker-<span class="number">5</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [onPool-worker-<span class="number">6</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [onPool-worker-<span class="number">3</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [onPool-worker-<span class="number">7</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: a size <span class="number">100</span></span><br><span class="line">INFO <span class="number">33005</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] c<span class="variable">.b</span><span class="variable">.c</span><span class="variable">.m</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.MapError</span>: finish Size <span class="number">1700</span></span><br></pre></td></tr></table></figure>
<p>此时得到的1700 并不符合我们所需要的1000的目标值，说明这段代码存在线程不安全的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"right"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">right</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ConcurrentHashMap&lt;String,Long&gt; concurrentHashMap = getData(ITEM_COUNT-<span class="number">100</span>);</span><br><span class="line">       log.info(<span class="string">"init Size&#123;&#125;"</span>,concurrentHashMap.size());</span><br><span class="line">       ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">       forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>,<span class="number">10</span>).parallel().forEach(value -&gt; &#123;</span><br><span class="line">           <span class="comment">//此处进行加锁，但是也丢失了并发的作用</span></span><br><span class="line">           <span class="keyword">synchronized</span> (concurrentHashMap)&#123;</span><br><span class="line">               <span class="keyword">if</span> (ITEM_COUNT - concurrentHashMap.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="keyword">int</span> a = ITEM_COUNT - concurrentHashMap.size() ;</span><br><span class="line">                   log.info(<span class="string">"a size &#123;&#125;"</span>,a);</span><br><span class="line">                   concurrentHashMap.putAll(getData(a));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;));</span><br><span class="line">       forkJoinPool.shutdown();</span><br><span class="line">       forkJoinPool.awaitQuiescence(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">       log.info(<span class="string">"finish Size &#123;&#125;"</span>,concurrentHashMap.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>对<em>concurrentHashMap</em>进行加锁肯定是能够解决问题的，但是这么一来还有必要选择使用<strong>ConcurrentHashMap</strong>？</p>
<p>直接使用<strong>HashMap</strong>加锁也有同样的效果,说明在此处的<strong>ConcurrentHashMap</strong>是没必要的,是错误理解了它的作用而得到的错误用法。</p>
</li>
</ul>
<h3 id="没有充分了解并发工具的特性，从而无法发挥其威力"><a href="#没有充分了解并发工具的特性，从而无法发挥其威力" class="headerlink" title="没有充分了解并发工具的特性，从而无法发挥其威力"></a>没有充分了解并发工具的特性，从而无法发挥其威力</h3><ul>
<li><p><strong>ConCurrentHashMap</strong> 的一个常用的场景是用于统计 Map中key出现的次数</p>
</li>
<li><p>假设使用10个并发线程往 Map中写入值，Key的范围是0-9，循环写入1000W次，Value为Key出现的次数</p>
</li>
<li><p>一般做法就是直接map进行循环，为了保证不重复初始化Key，这时候为Key的累加加上锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Long&gt; <span class="title">normaluse</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Map&lt;String, Long&gt; freqs = <span class="keyword">new</span> HashMap&lt;&gt;(ITEM_COUNT);</span><br><span class="line">       ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">       forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>, LOOP_COUNT).parallel().forEach(i -&gt; &#123;</span><br><span class="line">                   <span class="comment">//获得一个随机的Key</span></span><br><span class="line">                   String key = <span class="string">"item"</span> + ThreadLocalRandom.current().nextInt(ITEM_COUNT);</span><br><span class="line">                   <span class="keyword">synchronized</span> (freqs) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (freqs.containsKey(key)) &#123;</span><br><span class="line">                           <span class="comment">//Key存在则+1</span></span><br><span class="line">                           freqs.put(key, freqs.get(key) + <span class="number">1</span>);</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="comment">//Key不存在则初始化为1</span></span><br><span class="line">                           freqs.put(key, <span class="number">1L</span>);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">       ));</span><br><span class="line">       forkJoinPool.shutdown();</span><br><span class="line">       forkJoinPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">       <span class="keyword">return</span> freqs;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种做法就是使用ConcurrentHashMap 内置的 conputeIfAbsent 方法进行增加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Long&gt; <span class="title">gooduse</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       ConcurrentHashMap&lt;String, LongAdder&gt; freqs = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(ITEM_COUNT);</span><br><span class="line">       ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(THREAD_COUNT);</span><br><span class="line">       forkJoinPool.execute(() -&gt; IntStream.rangeClosed(<span class="number">1</span>, LOOP_COUNT).parallel().forEach(i -&gt; &#123;</span><br><span class="line">                   String key = <span class="string">"item"</span> + ThreadLocalRandom.current().nextInt(ITEM_COUNT);</span><br><span class="line">                   <span class="comment">//利用computeIfAbsent()方法来实例化LongAdder，然后利用LongAdder来进行线程安全计数</span></span><br><span class="line">                   freqs.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> LongAdder()).increment();</span><br><span class="line">               &#125;</span><br><span class="line">       ));</span><br><span class="line">       forkJoinPool.shutdown();</span><br><span class="line">       forkJoinPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">       <span class="comment">//因为我们的Value是LongAdder而不是Long，所以需要做一次转换才能返回</span></span><br><span class="line">       <span class="keyword">return</span> freqs.entrySet().stream()</span><br><span class="line">               .collect(Collectors.toMap(</span><br><span class="line">                       Map.Entry::getKey,</span><br><span class="line">                       e -&gt; e.getValue().longValue())</span><br><span class="line">               );</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这两种做法都能满足我们统计的需求，我们通过<em>StopWatch</em> 来对两个方式的速度进行统计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/compare"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compareTime</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       </span><br><span class="line">       StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">       stopWatch.start(<span class="string">"goodUse"</span>);</span><br><span class="line">       Map&lt;String, Long&gt; goodUse = goodUse();</span><br><span class="line">       stopWatch.stop();</span><br><span class="line">       Assert.isTrue(goodUse.size() == ITEM_COUNT,<span class="string">"goodUse count Err"</span>);</span><br><span class="line">       Assert.isTrue(goodUse.values().stream()</span><br><span class="line">               .mapToLong(value -&gt; value)</span><br><span class="line">               .reduce(<span class="number">0</span>,Long::sum)==LOOP_COUNT,<span class="string">"goodUse count Err"</span>);</span><br><span class="line">   </span><br><span class="line">       stopWatch.start(<span class="string">"normalUse"</span>);</span><br><span class="line">       Map&lt;String, Long&gt; normalUse = normalUse();</span><br><span class="line">       stopWatch.stop();</span><br><span class="line">       Assert.isTrue(normalUse.size() == ITEM_COUNT,<span class="string">"normalUse count Err"</span>);</span><br><span class="line">       Assert.isTrue(normalUse.values().stream()</span><br><span class="line">               .mapToLong(value -&gt; value)</span><br><span class="line">               .reduce(<span class="number">0</span>,Long::sum)==LOOP_COUNT,<span class="string">"normalUse count Err"</span>);</span><br><span class="line">       </span><br><span class="line">       log.info(stopWatch.prettyPrint());</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">StopWatch '': running <span class="keyword">time</span> = <span class="number">17247637770</span> ns</span><br><span class="line">---------------------------------------------</span><br><span class="line">ns         %     Task name</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="number">1860003595</span>  <span class="number">011</span>%  goodUse</span><br><span class="line"><span class="number">15387634175</span>  <span class="number">089</span>%  normalUse</span><br></pre></td></tr></table></figure>
<p>由日志可知，两者时间上的差距将近9倍。</p>
</li>
</ul>
<h3 id="没有认清并发工具的使用场景，因而导致性能问题"><a href="#没有认清并发工具的使用场景，因而导致性能问题" class="headerlink" title="没有认清并发工具的使用场景，因而导致性能问题"></a>没有认清并发工具的使用场景，因而导致性能问题</h3><ul>
<li><p><strong>CopyOnWrite</strong> （目前我暂时没使用过，这儿就直接引用专栏老师的例子）</p>
<ul>
<li>这个是在写入的时候直接复制一份数据进行写入，然后将旧的引用指向新的队列，这样可以不用加锁，在写的同时，读操作依然可以读取旧的数据，Concurrent容器则不能做到这一点。</li>
<li>但是也有两个缺点：<ul>
<li>1.因为对旧的数据进行了一份拷贝，所以占用的内存比较大，等于是空间换时间。</li>
<li>2.不适用于对数据一致性时效要求比较高的场景，因为他只保证了数据的最终一致性，Concurrent则是保证了数据的随时一致性，<em>适用于黑名单缓存等对时效性要求没有那么高的场景</em>。</li>
</ul>
</li>
</ul>
</li>
<li><p>我们发现一段简单的非数据库操作的业务逻辑，消耗了超出预期的时间，在修改数据时操作本地缓存比回写数据库慢许多。查看代码发现，开发同学使用了 CopyOnWriteArrayList 来缓存大量的数据，而数据变化又比较频繁</p>
</li>
<li><p>在 Java 中，<strong>CopyOnWriteArrayList 虽然是一个线程安全的 ArrayList，但因为其实现方式是，每次修改数据时都会复制一份数据出来，所以有明显的适用场景，即读多写少或者说希望无锁读的场景</strong>。</p>
</li>
<li><p>如果我们要使用 CopyOnWriteArrayList，那一定是因为场景需要而不是因为足够酷炫。如果读写比例均衡或者有大量写操作的话，使用 CopyOnWriteArrayList 的性能会非常糟糕。</p>
</li>
<li><p>我们写一段测试代码，来比较下使用 CopyOnWriteArrayList 和普通加锁方式 ArrayList 的读写性能吧。在这段代码中我们针对并发读和并发写分别写了一个测试方法，测试两者一定次数的写或读操作的耗时。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试并发写的性能</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"write"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">testWrite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; copyOnWriteArrayList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">       List&lt;Integer&gt; synchronizedList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">       StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">       <span class="keyword">int</span> loopCount = <span class="number">100000</span>;</span><br><span class="line">       stopWatch.start(<span class="string">"Write:copyOnWriteArrayList"</span>);</span><br><span class="line">       <span class="comment">//循环100000次并发往CopyOnWriteArrayList写入随机元素</span></span><br><span class="line">       IntStream.rangeClosed(<span class="number">1</span>, loopCount).parallel().forEach(i -&gt; copyOnWriteArrayList.add(ThreadLocalRandom.current().nextInt(loopCount)));</span><br><span class="line">       stopWatch.stop();</span><br><span class="line">       stopWatch.start(<span class="string">"Write:synchronizedList"</span>);</span><br><span class="line">       <span class="comment">//循环100000次并发往加锁的ArrayList写入随机元素</span></span><br><span class="line">       IntStream.rangeClosed(<span class="number">1</span>, loopCount).parallel().forEach(i -&gt; synchronizedList.add(ThreadLocalRandom.current().nextInt(loopCount)));</span><br><span class="line">       stopWatch.stop();</span><br><span class="line">       log.info(stopWatch.prettyPrint());</span><br><span class="line">       Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">       result.put(<span class="string">"copyOnWriteArrayList"</span>, copyOnWriteArrayList.size());</span><br><span class="line">       result.put(<span class="string">"synchronizedList"</span>, synchronizedList.size());</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//帮助方法用来填充List</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">       list.addAll(IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>).boxed().collect(Collectors.toList()));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//测试并发读的性能</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"read"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">testRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//创建两个测试对象</span></span><br><span class="line">       List&lt;Integer&gt; copyOnWriteArrayList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">       List&lt;Integer&gt; synchronizedList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">       <span class="comment">//填充数据</span></span><br><span class="line">       addAll(copyOnWriteArrayList);</span><br><span class="line">       addAll(synchronizedList);</span><br><span class="line">       StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">       <span class="keyword">int</span> loopCount = <span class="number">1000000</span>;</span><br><span class="line">       <span class="keyword">int</span> count = copyOnWriteArrayList.size();</span><br><span class="line">       stopWatch.start(<span class="string">"Read:copyOnWriteArrayList"</span>);</span><br><span class="line">       <span class="comment">//循环1000000次并发从CopyOnWriteArrayList随机查询元素</span></span><br><span class="line">       IntStream.rangeClosed(<span class="number">1</span>, loopCount).parallel().forEach(i -&gt; copyOnWriteArrayList.get(ThreadLocalRandom.current().nextInt(count)));</span><br><span class="line">       stopWatch.stop();</span><br><span class="line">       stopWatch.start(<span class="string">"Read:synchronizedList"</span>);</span><br><span class="line">       <span class="comment">//循环1000000次并发从加锁的ArrayList随机查询元素</span></span><br><span class="line">       IntStream.range(<span class="number">0</span>, loopCount).parallel().forEach(i -&gt; synchronizedList.get(ThreadLocalRandom.current().nextInt(count)));</span><br><span class="line">       stopWatch.stop();</span><br><span class="line">       log.info(stopWatch.prettyPrint());</span><br><span class="line">       Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">       result.put(<span class="string">"copyOnWriteArrayList"</span>, copyOnWriteArrayList.size());</span><br><span class="line">       result.put(<span class="string">"synchronizedList"</span>, synchronizedList.size());</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>运行程序可以看到，大量写的场景（10 万次 add 操作），CopyOnWriteArray 几乎比同步的 ArrayList 慢一百倍：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">StopWatch '': running <span class="keyword">time</span> = <span class="number">4207613566</span> ns</span><br><span class="line">---------------------------------------------</span><br><span class="line">ns         %     Task name</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="number">4117309161</span>  <span class="number">098</span>%  Write:copyOnWriteArrayList</span><br><span class="line"><span class="number">090304405</span>  <span class="number">002</span>%  Write:synchronizedList</span><br></pre></td></tr></table></figure>
</li>
<li><p>而在大量读的场景下（100 万次 get 操作），CopyOnWriteArray 又比同步的 ArrayList 快十倍以上</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">StopWatch '': running <span class="keyword">time</span> = <span class="number">416496271</span> ns</span><br><span class="line">---------------------------------------------</span><br><span class="line">ns         %     Task name</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="number">028776967</span>  <span class="number">007</span>%  Read:copyOnWriteArrayList</span><br><span class="line"><span class="number">387719304</span>  <span class="number">093</span>%  Read:synchronizedList</span><br></pre></td></tr></table></figure>
<p>以 add 方法为例，每次 add 时，都会用 Arrays.copyOf 创建一个新数组，频繁 add 时内存的申请释放消耗会很大：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>get方法则相反，因为在读取的时候CopyOnWriteArray不需要加锁，所以总体开销是比加锁的ArrayList低的。</p>
</li>
</ul>
<h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ul>
<li><p>我们多次用到了 ThreadLocalRandom，你觉得是否可以把它的实例设置到静态变量中，在多线程情况下重用呢？</p>
<p>不可以，结果是除了初始化 ThreadLocalRandom 的主线程获取的随机值是无模式的（调用者不可预测下个返回值，满足我们对伪随机的要求）之外，其他线程获得随机值都不是相互独立的（本质上来说，是因为他们用于生成随机数的种子 seed 的值可预测的，为 i <em> gamma，其中 i 是当前线程调用随机数生成方法次数，而 gamma 是 ThreadLocalRandom 类的一个 long 静态字段值）。例如，一个有趣的现象是，所有非初始化 ThreadLocalRandom 实例的线程如果调用相同次数的 nextInt() 方法，他们得到的随机数串是完全相同的。<br>造成这样现象的原因在于，ThreadLocalRandom 类维护了一个类单例字段，线程通过调用 ThreadLocalRandom#current() 方法来获取 ThreadLocalRandom 单例，然后以线程维护的实例字段 threadLocalRandomSeed 为种子生成下一个随机数和下一个种子值。<br>那么既然是单例模式，为什么多线程共用主线程初始化的实例就会出问题呢。问题就在于 current 方法，线程在调用 current() 方法的时候，会根据用每个线程的 thread 的一个实例字段 threadLocalRandomProbe 是否为 0 来判断是否当前线程实例是否为第一次调用随机数生成方法，从而决定是否要给当前线程初始化一个随机的 threadLocalRandomSeed 种子值。因此，如果其他线程绕过 current 方法直接调用随机数方法，那么它的种子值就是 0, 1 </em> gamma, 2 * gamma… 因此也就是可预测的了。</p>
</li>
<li><p>ConcurrentHashMap 还提供了 putIfAbsent 方法，你能否通过查阅JDK 文档，说说 computeIfAbsent 和 putIfAbsent 方法的区别？</p>
<p>computeIfAbsent和putIfAbsent区别是三点：</p>
<ol>
<li>当Key存在的时候，如果Value获取比较昂贵的话，putIfAbsent就白白浪费时间在获取这个昂贵的Value上（这个点特别注意）</li>
<li>Key不存在的时候，putIfAbsent返回null，小心空指针，而computeIfAbsent返回计算后的值</li>
<li>当Key不存在的时候，putIfAbsent允许put null进去，而computeIfAbsent不能，之后进行containsKey查询是有区别的（当然了，此条针对HashMap，ConcurrentHashMap不允许put null value进去）</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>common—error</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka安装手册</title>
    <url>/2020/03/12/kafka%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>kafka 2.11-0.9.0.1</li>
<li>zookeeper 3.4.14</li>
<li>jdk openjdk version “1.8.0_242”</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>一. Zookeeper<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvzf zookeeper-3.4.14.tar.gz</span><br><span class="line">mv zookeeper-3.4.14 /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/zookeeper-3.4.14/conf/</span><br><span class="line"><span class="comment">## 复制模板配置文件</span></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"><span class="comment">##### 可选，修改zoo.cfg 中的data地址</span></span><br><span class="line">dataDir=/opt/zookeeper-3.4.14/data</span><br><span class="line"><span class="comment">######</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##启动</span></span><br><span class="line"><span class="built_in">cd</span> ../bin/</span><br><span class="line">./zkServer.sh  start</span><br><span class="line"><span class="comment">## 修改环境变量，把zookeeper 地址添加进去</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment">######</span></span><br><span class="line">ZOOKEEPER_HOME=/opt/zookeeper-3.4.14</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br><span class="line"><span class="comment">######</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>二. Kafka<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xvzf kafka_2.11-0.9.0.1.tgz</span><br><span class="line">mv kafka_2.11-0.9.0.1 /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/kafka_2.11-0.9.0.1/</span><br><span class="line"><span class="comment">## 运行前需要确认Zookeeper是否启动 并且修改config/server.properties 中的Zookeeper地址</span></span><br><span class="line"><span class="built_in">cd</span> bin/</span><br><span class="line">nohup kafka-server-start.sh ../config/server.properties &amp;</span><br><span class="line"><span class="comment">### 没报错为正常启动 ，否则查看 nohup文件查看错误，一般情况为内存太大</span></span><br><span class="line">vim  kafka-server-start.sh</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$KAFKA_HEAP_OPTS</span>"</span> = <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx256m -Xms128m"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">######</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改环境变量，把zookeeper 地址添加进去</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment">######</span></span><br><span class="line">KAFKA_HOME=/opt/kafka_2.11-0.9.0.1</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$KAFKA_HOME</span>/bin</span><br><span class="line"><span class="comment">######</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>打开两个窗口</li>
<li>窗口一为producer </li>
<li>执行<code>opt/kafka_2.11-0.9.0.1$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</code></li>
<li>窗口二为consumer </li>
<li>执行<code>opt/kafka_2.11-0.9.0.1$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</code></li>
<li>在producer任意输入内容，查看consumer是否能正常接收，如果可以则安装完成</li>
</ul>
]]></content>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的前序，中序，后续遍历</title>
    <url>/2019/05/31/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%EF%BC%8C%E4%B8%AD%E5%BA%8F%EF%BC%8C%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul>
<li>递归的做法比较简单，直接递归调用方法就行，三种方式仅仅是入队列的位置不同而已，这儿就直接贴代码了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span> <span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> list;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//前序遍历</span></span><br><span class="line">         <span class="comment">//list.add(root.val);</span></span><br><span class="line">        </span><br><span class="line">         <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">             List&lt;Integer&gt; list1 = inorderTraversal(root.left);</span><br><span class="line">             list.addAll(list1);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//中序遍历</span></span><br><span class="line">         list.add(root.val);</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">             List&lt;Integer&gt; list1 = inorderTraversal(root.right);</span><br><span class="line">             list.addAll(list1);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//后序遍历</span></span><br><span class="line">         <span class="comment">//list.add(root.val);</span></span><br><span class="line">        </span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><ul>
<li>非递归的做法通常使用栈的方式处理，后续会比较麻烦一点，我们一个个来。<ol>
<li>前序遍历</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal_2</span> <span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//前序遍历的顺序是《根左右》</span></span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         TreeNode temp = root;</span><br><span class="line">         Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">         <span class="keyword">while</span> (temp != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">             <span class="comment">//节点非空就入栈</span></span><br><span class="line">             <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="comment">//根节点先直接输出</span></span><br><span class="line">                 list.add(temp.val);</span><br><span class="line">                 stack.push(temp);</span><br><span class="line">                 <span class="comment">//一路往左子树深入</span></span><br><span class="line">                 temp = temp.left;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//开始弹出堆栈，处理右子树</span></span><br><span class="line">             <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                 temp = stack.pop();</span><br><span class="line">                 temp = temp.right;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>中序遍历</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal_2</span> <span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//前序遍历的顺序是《左根右》</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode temp = root;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//一路往左子树深入</span></span><br><span class="line">            stack.push(temp);</span><br><span class="line">            temp = temp.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//弹出最后一个左子树的节点</span></span><br><span class="line">            temp = stack.pop();</span><br><span class="line">            <span class="comment">//输出当前值</span></span><br><span class="line">            list.add(temp.val);</span><br><span class="line">            <span class="comment">//往当前节点的右子树深入</span></span><br><span class="line">            temp = temp.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>后序遍历</p>
<ul>
<li>堆栈做法，因为是《左右根》的顺序，所以堆栈出栈的时候会调用两次，第一次完成左子树的遍历，到节点，此时该节点临时保存下，不输出，重新入栈，然后继续往该节点的右子树进行遍历，直到下一次临时节点等于栈顶，代表该节点的右子树也遍历完毕，此时再将节点的值进行输出</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 描述 后序遍历 非递归</span></span><br><span class="line"><span class="comment">      * 左边到最底层-》第一次出栈-》右边到最底层-》第二次出栈-》记录</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> java.util.List&lt;java.lang.Integer&gt;</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> Ted Wang</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@created</span> 2019/5/27 15:02</span></span><br><span class="line"><span class="comment">      **/</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span> <span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">         TreeNode temp = root;</span><br><span class="line">         TreeNode last = <span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">//走到左子树最底层</span></span><br><span class="line">         <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">             stack.push(temp);</span><br><span class="line">             temp = temp.left;</span><br><span class="line">         &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">             temp = stack.pop();</span><br><span class="line">             <span class="keyword">if</span> (temp.right != <span class="keyword">null</span> &amp;&amp; !temp.right.equals(last)) &#123;</span><br><span class="line">                 stack.push(temp);</span><br><span class="line">                 temp = temp.right;</span><br><span class="line">                 <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">//走到右子树的最左边</span></span><br><span class="line">                     stack.push(temp);</span><br><span class="line">                     temp = temp.left;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//没有右子树或者右子树已经遍历完成，输出该节点</span></span><br><span class="line">                 list.add(temp.val);</span><br><span class="line">                 last = temp;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>逆序做法，因为<strong>前序遍历</strong> 是 《根 左 右》，而 <strong>后序遍历</strong>是 《左 右 根》，所以只需要把<strong>前序遍历</strong>的遍历顺序改为《根 右 左》此时就正好是<strong>后续遍历</strong>的逆序遍历，把输出结果逆序输出就行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 描述 后序遍历 非递归</span></span><br><span class="line"><span class="comment">      * 前序 :根左右 改成 根右左 =》逆序 左右根（后序遍历）</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> java.util.List&lt;java.lang.Integer&gt;</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> Ted Wang</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@created</span> 2019/5/27 15:02</span></span><br><span class="line"><span class="comment">      **/</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal2</span> <span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         TreeNode temp = root;</span><br><span class="line">         Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">         <span class="keyword">while</span> (temp != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">             <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 list.add(temp.val);</span><br><span class="line">                 stack.push(temp);</span><br><span class="line">                 temp = temp.right;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                 temp = stack.pop();</span><br><span class="line">                 temp = temp.left;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         Collections.reverse(list);</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 描述 后序遍历 非递归 </span></span><br><span class="line"><span class="comment">      * 前序 :根左右 改成 根右左 =》逆序 左右根（后序遍历）</span></span><br><span class="line"><span class="comment">      * 思路和上面的方法一致，只是list在保存的时候直接逆序保存</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> java.util.List&lt;java.lang.Integer&gt;</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> Ted Wang</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@created</span> 2019/5/27 15:02</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal3</span> <span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         TreeNode temp = root;</span><br><span class="line">         Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">         stack.push(root);</span><br><span class="line">         <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">             temp = root;</span><br><span class="line">             list.add(<span class="number">0</span>, temp.val);</span><br><span class="line">              <span class="keyword">if</span> (temp.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                  stack.push(temp.left);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (temp.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                  stack.push(temp.right);</span><br><span class="line">              &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>​    </p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/05/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
